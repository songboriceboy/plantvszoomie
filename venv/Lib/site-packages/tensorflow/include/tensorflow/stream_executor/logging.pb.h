// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/stream_executor/logging.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fstream_5fexecutor_2flogging_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fstream_5fexecutor_2flogging_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/stream_executor/dnn.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fstream_5fexecutor_2flogging_2eproto 

namespace protobuf_tensorflow_2fstream_5fexecutor_2flogging_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fstream_5fexecutor_2flogging_2eproto
namespace stream_executor {
class ComputeCapability;
class ComputeCapabilityDefaultTypeInternal;
extern ComputeCapabilityDefaultTypeInternal _ComputeCapability_default_instance_;
class ConvLogEntry;
class ConvLogEntryDefaultTypeInternal;
extern ConvLogEntryDefaultTypeInternal _ConvLogEntry_default_instance_;
class CudaInfo;
class CudaInfoDefaultTypeInternal;
extern CudaInfoDefaultTypeInternal _CudaInfo_default_instance_;
class CudnnVersion;
class CudnnVersionDefaultTypeInternal;
extern CudnnVersionDefaultTypeInternal _CudnnVersion_default_instance_;
}  // namespace stream_executor
namespace google {
namespace protobuf {
template<> ::stream_executor::ComputeCapability* Arena::CreateMaybeMessage<::stream_executor::ComputeCapability>(Arena*);
template<> ::stream_executor::ConvLogEntry* Arena::CreateMaybeMessage<::stream_executor::ConvLogEntry>(Arena*);
template<> ::stream_executor::CudaInfo* Arena::CreateMaybeMessage<::stream_executor::CudaInfo>(Arena*);
template<> ::stream_executor::CudnnVersion* Arena::CreateMaybeMessage<::stream_executor::CudnnVersion>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace stream_executor {

// ===================================================================

class CudnnVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stream_executor.CudnnVersion) */ {
 public:
  CudnnVersion();
  virtual ~CudnnVersion();

  CudnnVersion(const CudnnVersion& from);

  inline CudnnVersion& operator=(const CudnnVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CudnnVersion(CudnnVersion&& from) noexcept
    : CudnnVersion() {
    *this = ::std::move(from);
  }

  inline CudnnVersion& operator=(CudnnVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CudnnVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CudnnVersion* internal_default_instance() {
    return reinterpret_cast<const CudnnVersion*>(
               &_CudnnVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CudnnVersion* other);
  friend void swap(CudnnVersion& a, CudnnVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CudnnVersion* New() const final {
    return CreateMaybeMessage<CudnnVersion>(NULL);
  }

  CudnnVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CudnnVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CudnnVersion& from);
  void MergeFrom(const CudnnVersion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CudnnVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 major = 1;
  void clear_major();
  static const int kMajorFieldNumber = 1;
  ::google::protobuf::int32 major() const;
  void set_major(::google::protobuf::int32 value);

  // int32 minor = 2;
  void clear_minor();
  static const int kMinorFieldNumber = 2;
  ::google::protobuf::int32 minor() const;
  void set_minor(::google::protobuf::int32 value);

  // int32 patch = 3;
  void clear_patch();
  static const int kPatchFieldNumber = 3;
  ::google::protobuf::int32 patch() const;
  void set_patch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stream_executor.CudnnVersion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 major_;
  ::google::protobuf::int32 minor_;
  ::google::protobuf::int32 patch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fstream_5fexecutor_2flogging_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ComputeCapability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stream_executor.ComputeCapability) */ {
 public:
  ComputeCapability();
  virtual ~ComputeCapability();

  ComputeCapability(const ComputeCapability& from);

  inline ComputeCapability& operator=(const ComputeCapability& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ComputeCapability(ComputeCapability&& from) noexcept
    : ComputeCapability() {
    *this = ::std::move(from);
  }

  inline ComputeCapability& operator=(ComputeCapability&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComputeCapability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComputeCapability* internal_default_instance() {
    return reinterpret_cast<const ComputeCapability*>(
               &_ComputeCapability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ComputeCapability* other);
  friend void swap(ComputeCapability& a, ComputeCapability& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComputeCapability* New() const final {
    return CreateMaybeMessage<ComputeCapability>(NULL);
  }

  ComputeCapability* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ComputeCapability>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ComputeCapability& from);
  void MergeFrom(const ComputeCapability& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComputeCapability* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 major = 1;
  void clear_major();
  static const int kMajorFieldNumber = 1;
  ::google::protobuf::int32 major() const;
  void set_major(::google::protobuf::int32 value);

  // int32 minor = 2;
  void clear_minor();
  static const int kMinorFieldNumber = 2;
  ::google::protobuf::int32 minor() const;
  void set_minor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stream_executor.ComputeCapability)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 major_;
  ::google::protobuf::int32 minor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fstream_5fexecutor_2flogging_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CudaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stream_executor.CudaInfo) */ {
 public:
  CudaInfo();
  virtual ~CudaInfo();

  CudaInfo(const CudaInfo& from);

  inline CudaInfo& operator=(const CudaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CudaInfo(CudaInfo&& from) noexcept
    : CudaInfo() {
    *this = ::std::move(from);
  }

  inline CudaInfo& operator=(CudaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CudaInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CudaInfo* internal_default_instance() {
    return reinterpret_cast<const CudaInfo*>(
               &_CudaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CudaInfo* other);
  friend void swap(CudaInfo& a, CudaInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CudaInfo* New() const final {
    return CreateMaybeMessage<CudaInfo>(NULL);
  }

  CudaInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CudaInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CudaInfo& from);
  void MergeFrom(const CudaInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CudaInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .stream_executor.CudnnVersion cudnn_version = 1;
  bool has_cudnn_version() const;
  void clear_cudnn_version();
  static const int kCudnnVersionFieldNumber = 1;
  private:
  const ::stream_executor::CudnnVersion& _internal_cudnn_version() const;
  public:
  const ::stream_executor::CudnnVersion& cudnn_version() const;
  ::stream_executor::CudnnVersion* release_cudnn_version();
  ::stream_executor::CudnnVersion* mutable_cudnn_version();
  void set_allocated_cudnn_version(::stream_executor::CudnnVersion* cudnn_version);

  // .stream_executor.ComputeCapability compute_capability = 2;
  bool has_compute_capability() const;
  void clear_compute_capability();
  static const int kComputeCapabilityFieldNumber = 2;
  private:
  const ::stream_executor::ComputeCapability& _internal_compute_capability() const;
  public:
  const ::stream_executor::ComputeCapability& compute_capability() const;
  ::stream_executor::ComputeCapability* release_compute_capability();
  ::stream_executor::ComputeCapability* mutable_compute_capability();
  void set_allocated_compute_capability(::stream_executor::ComputeCapability* compute_capability);

  // @@protoc_insertion_point(class_scope:stream_executor.CudaInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::stream_executor::CudnnVersion* cudnn_version_;
  ::stream_executor::ComputeCapability* compute_capability_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fstream_5fexecutor_2flogging_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConvLogEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stream_executor.ConvLogEntry) */ {
 public:
  ConvLogEntry();
  virtual ~ConvLogEntry();

  ConvLogEntry(const ConvLogEntry& from);

  inline ConvLogEntry& operator=(const ConvLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConvLogEntry(ConvLogEntry&& from) noexcept
    : ConvLogEntry() {
    *this = ::std::move(from);
  }

  inline ConvLogEntry& operator=(ConvLogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvLogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvLogEntry* internal_default_instance() {
    return reinterpret_cast<const ConvLogEntry*>(
               &_ConvLogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConvLogEntry* other);
  friend void swap(ConvLogEntry& a, ConvLogEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConvLogEntry* New() const final {
    return CreateMaybeMessage<ConvLogEntry>(NULL);
  }

  ConvLogEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConvLogEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConvLogEntry& from);
  void MergeFrom(const ConvLogEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvLogEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .stream_executor.CudaInfo cuda_info = 1;
  bool has_cuda_info() const;
  void clear_cuda_info();
  static const int kCudaInfoFieldNumber = 1;
  private:
  const ::stream_executor::CudaInfo& _internal_cuda_info() const;
  public:
  const ::stream_executor::CudaInfo& cuda_info() const;
  ::stream_executor::CudaInfo* release_cuda_info();
  ::stream_executor::CudaInfo* mutable_cuda_info();
  void set_allocated_cuda_info(::stream_executor::CudaInfo* cuda_info);

  // .stream_executor.dnn.ConvolutionProto convolution = 2;
  bool has_convolution() const;
  void clear_convolution();
  static const int kConvolutionFieldNumber = 2;
  private:
  const ::stream_executor::dnn::ConvolutionProto& _internal_convolution() const;
  public:
  const ::stream_executor::dnn::ConvolutionProto& convolution() const;
  ::stream_executor::dnn::ConvolutionProto* release_convolution();
  ::stream_executor::dnn::ConvolutionProto* mutable_convolution();
  void set_allocated_convolution(::stream_executor::dnn::ConvolutionProto* convolution);

  // float profile_time_ms = 3;
  void clear_profile_time_ms();
  static const int kProfileTimeMsFieldNumber = 3;
  float profile_time_ms() const;
  void set_profile_time_ms(float value);

  // @@protoc_insertion_point(class_scope:stream_executor.ConvLogEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::stream_executor::CudaInfo* cuda_info_;
  ::stream_executor::dnn::ConvolutionProto* convolution_;
  float profile_time_ms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fstream_5fexecutor_2flogging_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CudnnVersion

// int32 major = 1;
inline void CudnnVersion::clear_major() {
  major_ = 0;
}
inline ::google::protobuf::int32 CudnnVersion::major() const {
  // @@protoc_insertion_point(field_get:stream_executor.CudnnVersion.major)
  return major_;
}
inline void CudnnVersion::set_major(::google::protobuf::int32 value) {
  
  major_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.CudnnVersion.major)
}

// int32 minor = 2;
inline void CudnnVersion::clear_minor() {
  minor_ = 0;
}
inline ::google::protobuf::int32 CudnnVersion::minor() const {
  // @@protoc_insertion_point(field_get:stream_executor.CudnnVersion.minor)
  return minor_;
}
inline void CudnnVersion::set_minor(::google::protobuf::int32 value) {
  
  minor_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.CudnnVersion.minor)
}

// int32 patch = 3;
inline void CudnnVersion::clear_patch() {
  patch_ = 0;
}
inline ::google::protobuf::int32 CudnnVersion::patch() const {
  // @@protoc_insertion_point(field_get:stream_executor.CudnnVersion.patch)
  return patch_;
}
inline void CudnnVersion::set_patch(::google::protobuf::int32 value) {
  
  patch_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.CudnnVersion.patch)
}

// -------------------------------------------------------------------

// ComputeCapability

// int32 major = 1;
inline void ComputeCapability::clear_major() {
  major_ = 0;
}
inline ::google::protobuf::int32 ComputeCapability::major() const {
  // @@protoc_insertion_point(field_get:stream_executor.ComputeCapability.major)
  return major_;
}
inline void ComputeCapability::set_major(::google::protobuf::int32 value) {
  
  major_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.ComputeCapability.major)
}

// int32 minor = 2;
inline void ComputeCapability::clear_minor() {
  minor_ = 0;
}
inline ::google::protobuf::int32 ComputeCapability::minor() const {
  // @@protoc_insertion_point(field_get:stream_executor.ComputeCapability.minor)
  return minor_;
}
inline void ComputeCapability::set_minor(::google::protobuf::int32 value) {
  
  minor_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.ComputeCapability.minor)
}

// -------------------------------------------------------------------

// CudaInfo

// .stream_executor.CudnnVersion cudnn_version = 1;
inline bool CudaInfo::has_cudnn_version() const {
  return this != internal_default_instance() && cudnn_version_ != NULL;
}
inline void CudaInfo::clear_cudnn_version() {
  if (GetArenaNoVirtual() == NULL && cudnn_version_ != NULL) {
    delete cudnn_version_;
  }
  cudnn_version_ = NULL;
}
inline const ::stream_executor::CudnnVersion& CudaInfo::_internal_cudnn_version() const {
  return *cudnn_version_;
}
inline const ::stream_executor::CudnnVersion& CudaInfo::cudnn_version() const {
  const ::stream_executor::CudnnVersion* p = cudnn_version_;
  // @@protoc_insertion_point(field_get:stream_executor.CudaInfo.cudnn_version)
  return p != NULL ? *p : *reinterpret_cast<const ::stream_executor::CudnnVersion*>(
      &::stream_executor::_CudnnVersion_default_instance_);
}
inline ::stream_executor::CudnnVersion* CudaInfo::release_cudnn_version() {
  // @@protoc_insertion_point(field_release:stream_executor.CudaInfo.cudnn_version)
  
  ::stream_executor::CudnnVersion* temp = cudnn_version_;
  cudnn_version_ = NULL;
  return temp;
}
inline ::stream_executor::CudnnVersion* CudaInfo::mutable_cudnn_version() {
  
  if (cudnn_version_ == NULL) {
    auto* p = CreateMaybeMessage<::stream_executor::CudnnVersion>(GetArenaNoVirtual());
    cudnn_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stream_executor.CudaInfo.cudnn_version)
  return cudnn_version_;
}
inline void CudaInfo::set_allocated_cudnn_version(::stream_executor::CudnnVersion* cudnn_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cudnn_version_;
  }
  if (cudnn_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cudnn_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cudnn_version, submessage_arena);
    }
    
  } else {
    
  }
  cudnn_version_ = cudnn_version;
  // @@protoc_insertion_point(field_set_allocated:stream_executor.CudaInfo.cudnn_version)
}

// .stream_executor.ComputeCapability compute_capability = 2;
inline bool CudaInfo::has_compute_capability() const {
  return this != internal_default_instance() && compute_capability_ != NULL;
}
inline void CudaInfo::clear_compute_capability() {
  if (GetArenaNoVirtual() == NULL && compute_capability_ != NULL) {
    delete compute_capability_;
  }
  compute_capability_ = NULL;
}
inline const ::stream_executor::ComputeCapability& CudaInfo::_internal_compute_capability() const {
  return *compute_capability_;
}
inline const ::stream_executor::ComputeCapability& CudaInfo::compute_capability() const {
  const ::stream_executor::ComputeCapability* p = compute_capability_;
  // @@protoc_insertion_point(field_get:stream_executor.CudaInfo.compute_capability)
  return p != NULL ? *p : *reinterpret_cast<const ::stream_executor::ComputeCapability*>(
      &::stream_executor::_ComputeCapability_default_instance_);
}
inline ::stream_executor::ComputeCapability* CudaInfo::release_compute_capability() {
  // @@protoc_insertion_point(field_release:stream_executor.CudaInfo.compute_capability)
  
  ::stream_executor::ComputeCapability* temp = compute_capability_;
  compute_capability_ = NULL;
  return temp;
}
inline ::stream_executor::ComputeCapability* CudaInfo::mutable_compute_capability() {
  
  if (compute_capability_ == NULL) {
    auto* p = CreateMaybeMessage<::stream_executor::ComputeCapability>(GetArenaNoVirtual());
    compute_capability_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stream_executor.CudaInfo.compute_capability)
  return compute_capability_;
}
inline void CudaInfo::set_allocated_compute_capability(::stream_executor::ComputeCapability* compute_capability) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete compute_capability_;
  }
  if (compute_capability) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      compute_capability = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, compute_capability, submessage_arena);
    }
    
  } else {
    
  }
  compute_capability_ = compute_capability;
  // @@protoc_insertion_point(field_set_allocated:stream_executor.CudaInfo.compute_capability)
}

// -------------------------------------------------------------------

// ConvLogEntry

// .stream_executor.CudaInfo cuda_info = 1;
inline bool ConvLogEntry::has_cuda_info() const {
  return this != internal_default_instance() && cuda_info_ != NULL;
}
inline void ConvLogEntry::clear_cuda_info() {
  if (GetArenaNoVirtual() == NULL && cuda_info_ != NULL) {
    delete cuda_info_;
  }
  cuda_info_ = NULL;
}
inline const ::stream_executor::CudaInfo& ConvLogEntry::_internal_cuda_info() const {
  return *cuda_info_;
}
inline const ::stream_executor::CudaInfo& ConvLogEntry::cuda_info() const {
  const ::stream_executor::CudaInfo* p = cuda_info_;
  // @@protoc_insertion_point(field_get:stream_executor.ConvLogEntry.cuda_info)
  return p != NULL ? *p : *reinterpret_cast<const ::stream_executor::CudaInfo*>(
      &::stream_executor::_CudaInfo_default_instance_);
}
inline ::stream_executor::CudaInfo* ConvLogEntry::release_cuda_info() {
  // @@protoc_insertion_point(field_release:stream_executor.ConvLogEntry.cuda_info)
  
  ::stream_executor::CudaInfo* temp = cuda_info_;
  cuda_info_ = NULL;
  return temp;
}
inline ::stream_executor::CudaInfo* ConvLogEntry::mutable_cuda_info() {
  
  if (cuda_info_ == NULL) {
    auto* p = CreateMaybeMessage<::stream_executor::CudaInfo>(GetArenaNoVirtual());
    cuda_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stream_executor.ConvLogEntry.cuda_info)
  return cuda_info_;
}
inline void ConvLogEntry::set_allocated_cuda_info(::stream_executor::CudaInfo* cuda_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cuda_info_;
  }
  if (cuda_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cuda_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cuda_info, submessage_arena);
    }
    
  } else {
    
  }
  cuda_info_ = cuda_info;
  // @@protoc_insertion_point(field_set_allocated:stream_executor.ConvLogEntry.cuda_info)
}

// .stream_executor.dnn.ConvolutionProto convolution = 2;
inline bool ConvLogEntry::has_convolution() const {
  return this != internal_default_instance() && convolution_ != NULL;
}
inline const ::stream_executor::dnn::ConvolutionProto& ConvLogEntry::_internal_convolution() const {
  return *convolution_;
}
inline const ::stream_executor::dnn::ConvolutionProto& ConvLogEntry::convolution() const {
  const ::stream_executor::dnn::ConvolutionProto* p = convolution_;
  // @@protoc_insertion_point(field_get:stream_executor.ConvLogEntry.convolution)
  return p != NULL ? *p : *reinterpret_cast<const ::stream_executor::dnn::ConvolutionProto*>(
      &::stream_executor::dnn::_ConvolutionProto_default_instance_);
}
inline ::stream_executor::dnn::ConvolutionProto* ConvLogEntry::release_convolution() {
  // @@protoc_insertion_point(field_release:stream_executor.ConvLogEntry.convolution)
  
  ::stream_executor::dnn::ConvolutionProto* temp = convolution_;
  convolution_ = NULL;
  return temp;
}
inline ::stream_executor::dnn::ConvolutionProto* ConvLogEntry::mutable_convolution() {
  
  if (convolution_ == NULL) {
    auto* p = CreateMaybeMessage<::stream_executor::dnn::ConvolutionProto>(GetArenaNoVirtual());
    convolution_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stream_executor.ConvLogEntry.convolution)
  return convolution_;
}
inline void ConvLogEntry::set_allocated_convolution(::stream_executor::dnn::ConvolutionProto* convolution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(convolution_);
  }
  if (convolution) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      convolution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, convolution, submessage_arena);
    }
    
  } else {
    
  }
  convolution_ = convolution;
  // @@protoc_insertion_point(field_set_allocated:stream_executor.ConvLogEntry.convolution)
}

// float profile_time_ms = 3;
inline void ConvLogEntry::clear_profile_time_ms() {
  profile_time_ms_ = 0;
}
inline float ConvLogEntry::profile_time_ms() const {
  // @@protoc_insertion_point(field_get:stream_executor.ConvLogEntry.profile_time_ms)
  return profile_time_ms_;
}
inline void ConvLogEntry::set_profile_time_ms(float value) {
  
  profile_time_ms_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.ConvLogEntry.profile_time_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream_executor

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fstream_5fexecutor_2flogging_2eproto
